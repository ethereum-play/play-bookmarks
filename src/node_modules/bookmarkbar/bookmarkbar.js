const bel = require('bel')
const csjs = require('csjs-inject')

module.exports = bookmarkbar

var counter = 1

function bookmarkbar (url = '', theme, next = () => {}) {
  const ID = `/bookmarkbar-${counter++}`
  var iframe, listener, id = 1
  const view = document.createElement('div')
  const key = bel`<input>`
  const val = bel`<textarea>`
  const mount_input = bel`<input>`
  const mount_display = bel`<span style="font-weight: 900;"></span>`
  const btnMount = bel`<button>mount</button>`
  const minus = bel`<button>-</button>`
  const plus = bel`<button>+</button>`
  const element = bel`<div class=${css.bookmarkbar}>
    <div class=${css.mount}>${mount_input}${btnMount}</div><hr>
    <div>
      <div>path: ${key}></div>
      <div>value:${val}</div>
      ${minus}${plus}
    </div><hr>${view}
  </div>`
  setTimeout(mount, 0, url || '', init)
  minus.onclick = event => {
    if (!iframe) return next({ from: [ID, id++], type: 'error', body: [,'nothing mounted'] })
    if (!key.value) return next({ from: [ID, id++], type: 'error', body: [,'no path given'] })

    const data = { from: [ID, id++], path: [], type: 'del' }
    throw new Error('WORK IN PROGRESS')
    next(null, { id: id++, type: 'cmd:del', data: key.value })
    next({ from: [ID, id++], type: 'error', body: [,'no path given'] })
  }
  plus.onclick = event => {
    throw new Error('WORK IN PROGRESS')
    if (!iframe) return next('nothing mounted')
    if (!key.value) return next('no path given')
    next(null, { id: id++, type: 'cmd:set', data: { key: key.value, val: val.value }})
  }
  btnMount.onclick = do_mount

  function undo_mount (event) {
    mount_input.value = ''
    btnMount.textContent = 'mount'
    btnMount.onclick = do_mount
    mount_display.replaceWith(mount_input)
    element.style.borderColor = 'black'
    if (iframe) iframe.parentElement.removeChild(iframe)
    if (listener) window.removeEventListener('message', listener)
    next(null, { id: id++, type: 'channel:disconnect', data: iframe.src })
  }
  function do_mount (event) {
    var url = mount_input.value
    mount(url, init)
  }
  return element
  function init (err, _iframe) {
    view.innerHTML = ''
    if (err) {
      element.style.borderColor = 'red'
      return next(view.innerHTML = err)
    }
    iframe = _iframe
    mount_display.innerHTML = iframe.src
    btnMount.textContent = 'unmount'
    btnMount.onclick = undo_mount
    mount_input.replaceWith(mount_display)
    element.style.borderColor = 'green'
    // listener = ({ source, data }) => {
    //   if (iframe.contentWindow === source) send(data)
    // }
    // window.addEventListener('message', listener)
    next(null, { id: id++, type: 'channel:connect', data: [iframe.src, iframe.contentWindow] })
  }
}
function mount (url, done) {
  if (!url) return done('cannot mount empty url')
  const iframe = document.createElement('iframe')
  iframe.src = url
  iframe.style = 'border: 0; width: 0px; height: 0px;'
  iframe.onload = () => {
    clearTimeout(id)
    done(null, iframe)
  }
  var id = setTimeout(() => {
    iframe.onload = ''
    done('mounting timed out.')
  }, 50000)
  document.body.appendChild(iframe)
}
const css = csjs`
.bookmarkbar {
  width: 100%;
  height: 95%;
  border: 2px dashed black;
  padding: 2%;
  margin-top: 1%;
  font-family: mono;
}
.mount {
  display: flex;
  padding-top: 7px;
  justify-content: center;
  align-items: center;
}`
